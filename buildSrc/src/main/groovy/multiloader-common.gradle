plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

base {
    archivesName = "${mod_id}-${project.name}"
}

version = "${minecraft_version}-${mod_version}"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_content_exclusively_found_in_one_repository
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "MrCrayfish (GitHub)"
                url = "https://maven.pkg.github.com/MrCrayfish/Maven"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
                }
            }
        }
        filter {
            includeGroupAndSubgroups("com.mrcrayfish")
        }
    }
    if (!System.getenv("CI")) {
        maven {
            url "file://" + System.getenv("LOCAL_MAVEN")
        }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
}

configurations {
    library
    implementation.extendsFrom library
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:$mod_id-${project.name}:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

processResources {
    def expandProps = [
            "group"                        : project.group, //Else we target the task's group.
            "version"                      : project.version,
            "minecraft_version"            : minecraft_version,
            "forge_version"                : forge_version,
            "fabric_version"               : fabric_version,
            "fabric_loader_version"        : fabric_loader_version,
            "neoforge_version"             : neoforge_version,
            "neoforge_version_range"       : neoforge_version_range,
            "neoforge_loader_version_range": neoforge_loader_version_range,
            "framework_version"            : framework_version,
            "catalogue_version"            : catalogue_version,
            "accessories_version"          : accessories_version,
            "trinkets_version"             : trinkets_version,
            "mod_name"                     : mod_name,
            "mod_version"                  : mod_version,
            "mod_author"                   : mod_author,
            "mod_id"                       : mod_id,
            "mod_license"                  : mod_license,
            "mod_desc"                     : mod_desc,
            "mod_homepage"                 : mod_homepage,
            "mod_source"                   : mod_source,
            "mod_issues"                   : mod_issues
    ]
    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

// Mute javadoc warnings
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Use the UTF-8 charset for Java compilation
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java

            // Exclude these from the published pom since it causes errors
            def excludedGroups = [
                "net.minecraftforge",
                "net.sf.jopt-simple"
            ]
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    excludedGroups.contains(it.groupId.text())
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
    repositories {
        if (System.getenv("CI")) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/MrCrayfish/Maven"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
                }
            }
        } else {
            maven {
                url "file://" + System.getenv("LOCAL_MAVEN")
            }
        }
    }
}

signing {
    if (System.getenv("SIGNING_KEY")) {
        def signingKey = System.getenv("SIGNING_KEY")
        def signingPassword = System.getenv("SIGNING_PASSPHRASE")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenJava
}